@using System.Text
@using System.Text.Json

<h3 style="text-align:center">Shared component</h3>
<section style="width: 33%; margin: auto">
    <form enctype="multipart/form-data">
        <!-- File input section -->
        <div class="form-group">
            <label for="fileName">Select a file to upload:</label>
            <InputFile OnChange="HandleFileSelected" />
            <p>
                <span>Selected File: @_fileName</span>
            </p>
        </div>

        <!-- Custom File Name -->
        <div class="form-group">
            <label for="CustomFileName">Rename the file (optional):</label>
            <input type="text" class="form-control" name="CustomFileName" @bind="_customFileName" />
        </div>

        <!-- Folder Target -->
        <div class="form-group">
            <label for="FilePathTarget">Folder Target (optional):</label>
            <input type="text" class="form-control" name="FilePathTarget" @bind="_filePathTarget" />
        </div>

        <!-- Button -->
        <button type="button" class="btn btn-primary" @onclick="UploadFileAsync">Upload File</button>
    </form>
</section>

@code {
    
    // Injects the HttpClient service for making HTTP requests.
    [Inject] private HttpClient _httpClient { get; set; } = default!;

    // Stores the selected file from the input.
    private IBrowserFile? _browserFile;

    // Stores the name of the selected file.
    private string _fileName = string.Empty;

    // Custom name for the file.
    private string _customFileName = UploadFileSettings.CustomFileName;
    
    // Target folder path for the upload.
    private string _filePathTarget = UploadFileSettings.FilePathTarget;

    /// <summary>
    /// Handles the event when a file is selected for upload.
    /// </summary>
    /// <param name="e">The event arguments containing information about the selected file.</param>
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Assigns the selected file to the private field.
        _browserFile = e.File;

        // Updates the file name field with the selected file's name.
        _fileName = _browserFile.Name;
    }

    /// <summary>
    /// Asynchronously uploads the selected file to the server.
    /// </summary>
    private async Task UploadFileAsync()
    {
        // Checks if a file has been selected; if not, log an error message.
        if (_browserFile == null)
        {
            Console.WriteLine("No file selected.");
            return;
        }

        // Converts the selected file to a byte array.
        byte[] fileBytes = await ConvertToByteArray(_browserFile);

        // Creates a model containing the file data for the upload.
        var uploadModel = new UploadFileByteArrayModel
            {
                FileBytes = fileBytes,
                FileName = _fileName,
                CustomFileName = _customFileName,
                FilePathTarget = _filePathTarget
            };

        // Serializes the model to JSON format for the HTTP request.
        var jsonContent = new StringContent(JsonSerializer.Serialize(uploadModel), Encoding.UTF8, "application/json");

        // Sends a POST request to the API to upload the file.
        var response = await _httpClient.PostAsync("api/UploadFileByteArray/UploadFile", jsonContent);

        // Checks if the response indicates a successful upload.
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("File uploaded successfully.");
        }
        else
        {
            // Logs an error message if the upload fails, including the error content.
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error uploading file: {error}");
        }
    }

    /// <summary>
    /// Converts the selected file into a byte array.
    /// </summary>
    /// <param name="file">The browser file to convert.</param>
    /// <returns>A byte array representing the file's content.</returns>
    private async Task<byte[]> ConvertToByteArray(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream())
        {
            // Creates a buffer to hold the file data.
            byte[] buffer = new byte[file.Size];

            // Reads the file data into the buffer.
            await stream.ReadAsync(buffer, 0, (int)file.Size);

            // Returns the buffer containing the file data as a byte array.
            return buffer;
        }
    }
}