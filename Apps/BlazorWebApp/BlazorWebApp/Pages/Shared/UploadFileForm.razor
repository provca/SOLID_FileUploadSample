@inject IBlazorFileUploadService BlazorFileUploadService

<h3 style="text-align:center">Shared component</h3>
<section style="width: 33%; margin: auto">
    <form enctype="multipart/form-data">
        <!-- File input section -->
        <div class="form-group">
            <label for="fileName">Select a file to upload:</label>
            <InputFile OnChange="HandleFileSelected" />
            <p>
                <span>Selected File: @_fileName</span>
            </p>
        </div>

        <!-- Custom File Name -->
        <div class="form-group">
            <label for="CustomFileName">Rename the file (optional):</label>
            <input type="text" class="form-control" name="CustomFileName" @bind="_customFileName" />
        </div>

        <!-- Folder Target -->
        <div class="form-group">
            <label for="FilePathTarget">Folder Target (optional):</label>
            <input type="text" class="form-control" name="FilePathTarget" @bind="_filePathTarget" />
        </div>

        <!-- Button -->
        <button type="button" class="btn btn-primary" @onclick="UploadFileAsync">Upload File</button>
        @if (isUploadSuccess.HasValue)
        {
            <p>@(isUploadSuccess.Value ? "File uploaded successfully!" : "File upload failed.")</p>
        }
    </form>
</section>

@code {

    // Stores the selected file from the input.
    private IBrowserFile? _browserFile;

    // Stores the name of the selected file.
    private string _fileName = string.Empty;

    // Custom name for the file.
    private string _customFileName = UploadFileSettings.CustomFileName;

    // Target folder path for the upload.
    private string _filePathTarget = UploadFileSettings.FilePathTarget;

    // Nullable bool to indicate success or failure
    private bool? isUploadSuccess;

    /// <summary>
    /// Handles the event when a file is selected for upload.
    /// </summary>
    /// <param name="e">The event arguments containing information about the selected file.</param>
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Assigns the selected file to the private field.
        _browserFile = e.File;

        // Updates the file name field with the selected file's name.
        _fileName = _browserFile.Name;

        // Reset the message when a new file is selected.
        isUploadSuccess = null;
    }

    /// <summary>
    /// Asynchronously uploads the selected file to the server by <see cref="BlazorWebApp.Services.BlazorFileUploadService"/> class.
    /// </summary>
    private async Task UploadFileAsync()
    {
        // Checks if a file has been selected; if not, log an error message.
        if (_browserFile == null)
        {
            Console.WriteLine("No file selected.");
            return ;
        }

        // Tries to upload the file using the BlazorFileUploadService.
        try
        {
            // It passes the selected browser file, the custom file name, and the target file path.
            isUploadSuccess = await BlazorFileUploadService.UploadFileAsync(_browserFile, _customFileName, _filePathTarget);

            if (isUploadSuccess.Value)
            {
                Console.WriteLine("File uploaded successfully.");
            }
            else
            {
                Console.WriteLine("File upload failed.");
            }
        }
        catch (HttpRequestException ex)
        {
            // Indicate failure.
            isUploadSuccess = false;

            // If an HttpRequestException is thrown, logs the error message from the exception.
            // This could indicate a failure in the HTTP request or an issue on the server.
            Console.WriteLine(ex.Message);
        }
    }
}